export declare class CPXUser extends HTMLElement {
    _authenticated: boolean;
    _userId: string;
    get userId(): string;
    set userId(val: string);
    _name: string;
    get name(): string;
    set name(val: string);
    _cookies: {};
    _email: string;
    get email(): string;
    set email(val: string);
    _ready: boolean;
    get ready(): boolean;
    set ready(val: boolean);
    _user: any;
    get user(): any;
    set user(val: any);
    7: any;
    _jwtCookie: string;
    get jwtCookie(): string;
    set jwtCookie(val: string);
    _jwtToken: string;
    get jwtToken(): string;
    set jwtToken(val: string);
    get kc(): string | true;
    _kcAuto: boolean;
    get kcAuto(): boolean;
    set kcAuto(val: boolean);
    _keycloak: any;
    get keycloak(): any;
    set keycloak(val: any);
    _kcUrl: string;
    get kcUrl(): string;
    set kcUrl(val: string);
    _kcConfig: string;
    get kcConfig(): string;
    set kcConfig(val: string);
    _kcRealm: string;
    get kcRealm(): string;
    set kcRealm(val: string);
    _kcClientId: string;
    get kcClientId(): string;
    set kcClientId(val: string);
    _kcToken: string;
    get kcToken(): string;
    set kcToken(val: string);
    constructor();
    connectedCallback(): void;
    static get observedAttributes(): string[];
    attributeChangedCallback(name: any, oldVal: any, newVal: any): void;
    validateKCConfig(): string | true;
    camelCase(str: String, to?: boolean): string;
    kcInit(config?: any): Promise<void>;
    login(): any;
    logout(): any;
    register(): any;
    account(): any;
    get token(): any;
}
