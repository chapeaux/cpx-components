export declare class CPXKeycloak extends HTMLElement {
    _cookies: Map<any, any>;
    _links: {
        logout: "";
        login: "";
        register: "";
    };
    _keycloak: any;
    get keycloak(): any;
    set keycloak(val: any);
    _url: string;
    get url(): string;
    set url(val: string);
    _config: string;
    get config(): string;
    set config(val: string);
    _options: string;
    get options(): string;
    set options(val: string);
    _realm: string;
    get realm(): string;
    set realm(val: string);
    _clientId: string;
    get clientId(): string;
    set clientId(val: string);
    _authenticated: boolean;
    get authenticated(): boolean;
    set authenticated(val: boolean);
    _ready: boolean;
    get ready(): boolean;
    set ready(val: boolean);
    _jwtCookie: string;
    get jwtCookie(): string;
    set jwtCookie(val: string);
    _jwtToken: string;
    get jwtToken(): string;
    set jwtToken(val: string);
    _loginElement: any;
    get loginElement(): any;
    set loginElement(val: any);
    _loginAttr: any;
    get loginAttr(): any;
    set loginAttr(val: any);
    _logoutElement: any;
    get logoutElement(): any;
    set logoutElement(val: any);
    _logoutAttr: any;
    get logoutAttr(): any;
    set logoutAttr(val: any);
    constructor();
    connectedCallback(): void;
    static get observedAttributes(): string[];
    attributeChangedCallback(name: string, oldVal: string, newVal: string): void;
    validateConfig(): string | true;
    camelCase(str: String, to?: boolean): string;
    init(config?: any): void;
    login(): any;
    logout(): any;
    register(): any;
    account(): any;
    get token(): any;
    get loginUrl(): any;
    get logoutUrl(): any;
}
